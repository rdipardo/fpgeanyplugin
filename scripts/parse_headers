#!/usr/bin/env bash
#
# Generates Object Pascal source from Geany headers.
#
# SPDX-FileCopyrightText: (c) 2023 Robert Di Pardo
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Permitted usage is detailed in the COPYING file.
#
set -e
# git tag of the Geany release to target ('1.38.0' or '2.0.0')
TARGET_GEANY_VERSION="${1:-2.0.0}"
BASE_PATH="$(pwd)/$(dirname "$0")"
PATCH_DIR="$BASE_PATH/../patches"
INPUT="$BASE_PATH/../src/h2pas.in.h"
MESSAGES="$BASE_PATH/../src/sci_messages"
TARGET="$BASE_PATH/../src/geanybindings"
. "${BASE_PATH}/untranslatable.sh"
# ==========================================================================
hide_symbols() {
  local neg="$3"
  local pre="$4"
  local post="$5"
  local rep="${6:-\/\* \1 \*\/}"
  [ -z "$neg" ] || neg="/$3/!"
  for sym in $(eval echo "\${$2[@]}")
  do
     sed -i -e "$neg s/\($pre$sym$post\)/$rep/g" "$1"
  done
}
# --------------------------------------------------------------------------
pp_fpc() {
  echo "Converting $(basename "$1")"
  # erase '\' continuation tokens to keep elaborate function macros on a single line
  sed -i ':a; N; s/[\\].*\n/ /; b a' "$1"
  hide_symbols "$1" 'FUNC_MACRO_DEFS' '' '^\s*#\s*define.*' '' '\/\/ \1'
  hide_symbols "$1" 'FEATURE_MACROS' '^\s*#\s*\(ifdef\|ifndef\|define\)' '' '' ' '
  hide_symbols "$1" 'MISC' '' '' '\s*(' ';\/\/ \1'
  # remove problematic C-style forward declarations
  sed -e '
    /typedef gboolean TVMatchCallback(gboolean);/d
    /\(struct\)\s*Geany\(Document;\|Plugin;\|FunctionsUndefined\)/d
    /\(struct\)\s*_ScintillaObject;/d
    /\(struct\)\s*Sci_TextToFind\(Full\)*;/d
    ' -i "$1"
}
# --------------------------------------------------------------------------
pp() {
  cc $(pkg-config -cflags gdk-3.0) \
      -Igeany/src \
      -Igeany/plugins \
      -Igeany/src/tagmanager \
      -Igeany/scintilla/include \
      -DGTK \
      -DGLIB_VERSION_MIN_REQUIRED=GLIB_VERSION_2_32 \
      -DGDK_DISABLE_DEPRECATION_WARNINGS \
      -P \
      -E "$1" > "$2"

      # h2pas removes leading _'s by itself with the -T option
      sed '
        /typedef struct _ScintillaObject/d
        /typedef struct _ScintillaClass/d' -i "$2"
      # patch up tm_source_file.h
      sed -i '/tm_get_real_path/d' "$2"
      # patch up keybindings.h
      sed '
        /plugin_set_key_group/i /*
        /plugin_set_key_group_full/i */' -i "$2"
      # remove stray ;'s
      sed -i '/^;$/d' "$2"
}
# --------------------------------------------------------------------------
extract_messages() {
  FROM=$(grep -nE '(\+\+Autogenerated)' "$1" | cut -f1 -d:)
  TO=$(grep -nE '(\-\-Autogenerated)' "$1" | cut -f1 -d:)
  echo "const" > "$MESSAGES"
  sed -n "$FROM,$TO p" "$1" | awk '
    /^#define/{sub(/^0x/,"$",$3);print " ",$2,"=",$3";"}
    /^#(if|end)(n?def|if)/{sub(/^#/,"",$1);print "{$"$1,$2"}"}
  ' >> "$MESSAGES"
}
# ==========================================================================
pushd "${BASE_PATH}/.."
[ ! -d 'geany/src' ] && git submodule update --init
git --git-dir=geany/.git --work-tree=geany checkout "$TARGET_GEANY_VERSION" -f

find 'geany/src' 'geany/scintilla/include' -type f -iname \*.h | sort |\
while read -r header; do
  # don't export standard lib or platform API defs
  sed -i.bak -e '/#\s*include <.*\(std\|str\|sys\|time\|glib\|gdk\|gtk\).*/d' "$header"
  [ "$(basename "$header")" = 'Scintilla.h' ] && extract_messages "$header"
  pp_fpc "$header"
done

pp "$INPUT" "$TARGET.h"
pp_fpc "$TARGET.h"
[ -z "$WINDIR" ] && SHARED_SUFFIX='.so.0' || SHARED_SUFFIX='-0.dll'
h2pas -D -S -T -c -i -p -v -w -l "libgeany$SHARED_SUFFIX" -o "$TARGET.inc" "$TARGET.h"

# remove auto-generated typedefs
sed -e '
1h; 1!H; $!d; x; s/\({ Pointers to basic pascal types, inserted by h2pas\).*\(\n[^\n]*{\$IFDEF FPC}\)/\2/
' -i "$TARGET.inc"
# fix mangled type names, invalid identifiers, typedefs
sed -e '
s/Tc\(char\|u*int\|long\)/c\1/g
s/Tg\(boolean\|char\|double\|float\|\(const\)*pointer\|s*size\|u*long\|u*int\(ptr\)*\)/g\1/g
s/T\(sptr\|intptr\|ptrdiff\)_t/coff_t/g
s/T\(uptr\|uintptr\|size\)_t/culonglong/g
s/T\(time_t\)/\1/g
s/Pp\(cchar\)/P\1/g
/\([PT]BuildTableData\)\s*=/d
/\([PT]TMParserType\)\s*=/d
/\(coff_t\|culonglong\)\s*=/d
s/\([^a-zA-Z_]\)\(\(end\|file\|mod\|object\|set\)\s*:\)/\1_\2/g
s/\:\s*\^\(P.*\)/:\1/g
' -i "$TARGET.inc"
# fix C-style indexing of arrays with Pascal enum values
sed -e '
s/\(0\.\..*\)\(GEANY_GBG_COUNT\)/\1Ord(High(TGeanyBuildGroup))/g
' -i "$TARGET.inc"
# add platform units, polyfill, etc.
TYPEDEFS=$(cat <<'PAS'
type \
  time_t = clonglong; \
  gintptr = coff_t; \
  guintptr = culonglong; \
  TTMParserType = gint; \
  PGeanyFiletypePrivate = gpointer; \
  PGeanyDocumentPrivate = gpointer; \
  PGeanyProjectPrivate = gpointer; \
  PGeanyPluginPrivate = gpointer; \
  TBuildTableData = gpointer; \
  TGeanyDocumentMessage = (MSG_TYPE_RELOAD, MSG_TYPE_RESAVE, MSG_TYPE_POST_RELOAD); \
\
const \
  NUM_MSG_TYPES = Ord(High(TGeanyDocumentMessage)); \
  GEANY_PROXY_IGNORE = $00; \
  GEANY_PROXY_MATCH = $01; \
  GEANY_PROXY_RELATED = (GEANY_PROXY_MATCH or $100); \
\
{$IFDEF FPC} \
{$ScopedEnums ON} \
{$ENDIF}
PAS
)
case "$TARGET_GEANY_VERSION" in
  "1.38.0" ) SCI_MSG_API='4'; TARGET_UNIT='geanyplugin240' ;;
         * ) SCI_MSG_API='5'; TARGET_UNIT='geanyplugin' ;;
esac
sed -i "1i {%MainUnit $TARGET_UNIT.pp}" -i "$TARGET.inc" "$MESSAGES"
sed -e "/{\$ENDIF}/a ${TYPEDEFS}" -i "$TARGET.inc"
# format
ptop -c ptop.cfg -i 2 -l 120 "$TARGET.inc" "$TARGET.inc"
sed -e 's/[[:space:]]*$//' -i "$TARGET.inc"
# manual fix-ups
[ -z "$WINDIR" ] && PLATFORM='gcc' || PLATFORM='mingw'
git apply -v "$PATCH_DIR/$PLATFORM/geany-$TARGET_GEANY_VERSION.diff"
OUT_PATH="$BASE_PATH/../src/$PLATFORM/$TARGET_GEANY_VERSION"
mkdir -p "$OUT_PATH"
mv "$TARGET.inc" "$OUT_PATH"
mv "$MESSAGES" "$(dirname "$MESSAGES")/sci_${SCI_MSG_API}_messages.inc"
popd
